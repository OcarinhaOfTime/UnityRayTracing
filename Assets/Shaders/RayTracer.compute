#pragma kernel CSMain

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float4 _PixelOffset;
float4 _DirectionalLight;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;

struct Sphere{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

struct Box{
    float3 position;
    float3 pmin;
    float3 pmax;
    float3 albedo;
    float3 specular;
};

StructuredBuffer<Sphere> _Spheres;


Sphere CreateSphere(float3 position, float radius)
{
    Sphere sphere;
    sphere.position = position;
    sphere.radius = radius;
    sphere.albedo = float3(.8f, .8f, .8f);
    sphere.specular = float3(.1f, .1f, .1f);
    return sphere;
}

Box CreateBox(float3 position, float3 pmin, float3 pmax)
{
    Box box;
    box.position = position;
    box.pmin = pmin;
    box.pmax = pmax;
    box.albedo = float3(.8f, .8f, .8f);
    box.specular = float3(.1f, .1f, .1f);
    return box;
}

//StructuredBuffer<Sphere> _Spheres

struct Ray{
    float3 origin;
    float3 direction;
    float3 energy;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1, 1, 1);
    return ray;
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
};

RayHit CreateRayHit(){
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

Ray CreateCameraRay(float2 uv){
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1.0)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0.0)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

void IntersectPlane(Ray ray, inout RayHit bestHit){
    float t = -ray.origin.y / ray.direction.y;

    if(t > 0 && t < bestHit.distance){
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.albedo = .75f;
        bestHit.specular = .0f;
    }
}

void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere){
    // Calculates the distance along the ray where the plane is intersected
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqrd = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if(p2sqrd < 0)
        return;

    float p2 = sqrt(p2sqrd);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    
    if(t > 0 && t < bestHit.distance){
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
    }
}

void IntersectBox(Ray ray, inout RayHit bestHit, Box box){
    float3 d = 1;

    float t = 0;
    
    if(t > 0 && t < bestHit.distance){
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - box.position);
        bestHit.albedo = box.albedo;
        bestHit.specular = box.specular;
    }
}

RayHit Trace(Ray ray){
    RayHit bestHit = CreateRayHit();
    IntersectPlane(ray, bestHit);
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for(uint i = 0; i<numSpheres; i++)
        IntersectSphere(ray, bestHit, _Spheres[i]);
    
    return bestHit;
}

float3 SampleSkybox(inout Ray ray){
    float theta = acos(ray.direction.y) / -PI;
    float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
    return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 1.5f;
}

float3 Shade(inout Ray ray, RayHit hit){
    if(hit.distance < 1.#INF){
        ray.origin = hit.position + hit.normal * .001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= hit.specular;

        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if(shadowHit.distance != 1.#INF){
            return 0;
        }

        return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
    }else{
        ray.energy = 0.0f;
        return SampleSkybox(ray);
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);
    //transform the ids into uvs of the range [-1, 1]
    float2 uv = float2((id.xy + _PixelOffset.xy) / float2(width, height) * 2.0f - 1.0f);

    Ray ray = CreateCameraRay(uv);

    float3 c = float3(0,0,0);
    for(int i=0; i<8; i++){
        RayHit hit = Trace(ray);
        c += ray.energy * Shade(ray, hit);
        if(!any(ray.energy))
            break;
    }

    Result[id.xy] = float4(c, 1);
}
